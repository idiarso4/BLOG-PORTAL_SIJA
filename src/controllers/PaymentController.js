const PaymentService = require('../services/PaymentService');
const UserSubscription = require('../models/UserSubscription');
const Subscription = require('../models/Subscription');
const User = require('../models/User');
const { validationResult } = require('express-validator');
const logger = require('../config/logger');

/**
 * Payment Controller
 */
class PaymentController {
  
  /**
   * Create payment for subscription
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  static async createPayment(req, res) {
    try {
      // Check validation errors
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Data tidak valid',
            details: errors.array()
          }
        });
      }
      
      const {\n        subscriptionId,\n        gateway = 'midtrans'\n      } = req.body;\n      \n      // Get user subscription\n      const userSubscription = await UserSubscription.findById(subscriptionId)\n        .populate('subscription')\n        .populate('user');\n      \n      if (!userSubscription) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'SUBSCRIPTION_NOT_FOUND',\n            message: 'Subscription tidak ditemukan'\n          }\n        });\n      }\n      \n      // Check if user owns this subscription\n      if (userSubscription.user._id.toString() !== req.user._id.toString()) {\n        return res.status(403).json({\n          success: false,\n          error: {\n            code: 'ACCESS_DENIED',\n            message: 'Akses ditolak'\n          }\n        });\n      }\n      \n      // Check if subscription is already paid\n      if (userSubscription.status === 'active') {\n        return res.status(400).json({\n          success: false,\n          error: {\n            code: 'ALREADY_PAID',\n            message: 'Subscription sudah aktif'\n          }\n        });\n      }\n      \n      // Create payment\n      const paymentResult = await PaymentService.createSubscriptionPayment({\n        userSubscription,\n        user: userSubscription.user,\n        plan: userSubscription.subscription\n      }, gateway);\n      \n      res.json({\n        success: true,\n        message: 'Payment berhasil dibuat',\n        data: paymentResult\n      });\n      \n    } catch (error) {\n      logger.error('Create payment error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'CREATE_PAYMENT_ERROR',\n          message: 'Terjadi kesalahan saat membuat pembayaran'\n        }\n      });\n    }\n  }\n  \n  /**\n   * Get payment status\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async getPaymentStatus(req, res) {\n    try {\n      const { subscriptionId } = req.params;\n      \n      // Get user subscription\n      const userSubscription = await UserSubscription.findById(subscriptionId)\n        .populate('user');\n      \n      if (!userSubscription) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'SUBSCRIPTION_NOT_FOUND',\n            message: 'Subscription tidak ditemukan'\n          }\n        });\n      }\n      \n      // Check if user owns this subscription\n      if (userSubscription.user._id.toString() !== req.user._id.toString()) {\n        return res.status(403).json({\n          success: false,\n          error: {\n            code: 'ACCESS_DENIED',\n            message: 'Akses ditolak'\n          }\n        });\n      }\n      \n      // Get payment status from gateway\n      let gatewayStatus = null;\n      \n      if (userSubscription.payment.transactionId && userSubscription.payment.gateway) {\n        try {\n          gatewayStatus = await PaymentService.getPaymentStatus(\n            userSubscription.payment.transactionId,\n            userSubscription.payment.gateway\n          );\n        } catch (gatewayError) {\n          logger.error('Gateway status check error:', gatewayError);\n        }\n      }\n      \n      res.json({\n        success: true,\n        data: {\n          subscription: {\n            id: userSubscription._id,\n            status: userSubscription.status,\n            amount: userSubscription.payment.amount,\n            currency: userSubscription.payment.currency,\n            method: userSubscription.payment.method,\n            gateway: userSubscription.payment.gateway,\n            transactionId: userSubscription.payment.transactionId\n          },\n          gatewayStatus\n        }\n      });\n      \n    } catch (error) {\n      logger.error('Get payment status error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'GET_PAYMENT_STATUS_ERROR',\n          message: 'Terjadi kesalahan saat mengambil status pembayaran'\n        }\n      });\n    }\n  }\n  \n  /**\n   * Handle Midtrans webhook\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async handleMidtransWebhook(req, res) {\n    try {\n      const notification = req.body;\n      \n      const result = await PaymentService.handleMidtransWebhook(notification);\n      \n      res.json({\n        success: true,\n        message: 'Webhook processed successfully',\n        data: result\n      });\n      \n    } catch (error) {\n      logger.error('Midtrans webhook error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'WEBHOOK_ERROR',\n          message: 'Terjadi kesalahan saat memproses webhook'\n        }\n      });\n    }\n  }\n  \n  /**\n   * Handle Xendit webhook\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async handleXenditWebhook(req, res) {\n    try {\n      const notification = req.body;\n      \n      const result = await PaymentService.handleXenditWebhook(notification);\n      \n      res.json({\n        success: true,\n        message: 'Webhook processed successfully',\n        data: result\n      });\n      \n    } catch (error) {\n      logger.error('Xendit webhook error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'WEBHOOK_ERROR',\n          message: 'Terjadi kesalahan saat memproses webhook'\n        }\n      });\n    }\n  }\n  \n  /**\n   * Handle Stripe webhook\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async handleStripeWebhook(req, res) {\n    try {\n      const event = req.body;\n      \n      const result = await PaymentService.handleStripeWebhook(event);\n      \n      res.json({\n        success: true,\n        message: 'Webhook processed successfully',\n        data: result\n      });\n      \n    } catch (error) {\n      logger.error('Stripe webhook error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'WEBHOOK_ERROR',\n          message: 'Terjadi kesalahan saat memproses webhook'\n        }\n      });\n    }\n  }\n  \n  /**\n   * Payment success page\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async paymentSuccess(req, res) {\n    try {\n      const { order_id, transaction_status } = req.query;\n      \n      // Find subscription by transaction ID\n      const userSubscription = await UserSubscription.findOne({\n        'payment.transactionId': order_id\n      }).populate('subscription').populate('user');\n      \n      if (!userSubscription) {\n        return res.redirect('/payment/error?message=Subscription tidak ditemukan');\n      }\n      \n      res.render('payment/success', {\n        title: 'Pembayaran Berhasil',\n        subscription: userSubscription,\n        plan: userSubscription.subscription,\n        transactionStatus: transaction_status\n      });\n      \n    } catch (error) {\n      logger.error('Payment success page error:', error);\n      res.redirect('/payment/error?message=Terjadi kesalahan');\n    }\n  }\n  \n  /**\n   * Payment error page\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async paymentError(req, res) {\n    try {\n      const { message = 'Pembayaran gagal' } = req.query;\n      \n      res.render('payment/error', {\n        title: 'Pembayaran Gagal',\n        message\n      });\n      \n    } catch (error) {\n      logger.error('Payment error page error:', error);\n      res.status(500).send('Terjadi kesalahan');\n    }\n  }\n  \n  /**\n   * Payment pending page\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async paymentPending(req, res) {\n    try {\n      const { order_id } = req.query;\n      \n      // Find subscription by transaction ID\n      const userSubscription = await UserSubscription.findOne({\n        'payment.transactionId': order_id\n      }).populate('subscription');\n      \n      res.render('payment/pending', {\n        title: 'Pembayaran Pending',\n        subscription: userSubscription,\n        plan: userSubscription?.subscription\n      });\n      \n    } catch (error) {\n      logger.error('Payment pending page error:', error);\n      res.redirect('/payment/error?message=Terjadi kesalahan');\n    }\n  }\n  \n  /**\n   * Get available payment methods\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  static async getPaymentMethods(req, res) {\n    try {\n      const paymentMethods = {\n        midtrans: {\n          name: 'Midtrans',\n          description: 'Pembayaran melalui Midtrans (Credit Card, Bank Transfer, E-Wallet)',\n          available: !!process.env.MIDTRANS_SERVER_KEY,\n          methods: ['credit_card', 'bank_transfer', 'gopay', 'ovo', 'dana']\n        },\n        xendit: {\n          name: 'Xendit',\n          description: 'Pembayaran melalui Xendit (Bank Transfer, E-Wallet, Retail)',\n          available: !!process.env.XENDIT_SECRET_KEY,\n          methods: ['bank_transfer', 'ovo', 'dana', 'linkaja', 'retail']\n        },\n        stripe: {\n          name: 'Stripe',\n          description: 'Pembayaran internasional melalui Stripe (Credit Card)',\n          available: !!process.env.STRIPE_SECRET_KEY,\n          methods: ['credit_card']\n        }\n      };\n      \n      // Filter only available methods\n      const availableMethods = Object.keys(paymentMethods)\n        .filter(key => paymentMethods[key].available)\n        .reduce((obj, key) => {\n          obj[key] = paymentMethods[key];\n          return obj;\n        }, {});\n      \n      res.json({\n        success: true,\n        data: {\n          paymentMethods: availableMethods\n        }\n      });\n      \n    } catch (error) {\n      logger.error('Get payment methods error:', error);\n      \n      res.status(500).json({\n        success: false,\n        error: {\n          code: 'GET_PAYMENT_METHODS_ERROR',\n          message: 'Terjadi kesalahan saat mengambil metode pembayaran'\n        }\n      });\n    }\n  }\n}\n\nmodule.exports = PaymentController;